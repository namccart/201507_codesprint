/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.gnuradio.controlport;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class ControlPort {

  public interface Iface {

    public void setKnobs(Map<String,Knob> knobs) throws org.apache.thrift.TException;

    public Map<String,Knob> getKnobs(List<String> knobs) throws org.apache.thrift.TException;

    public Map<String,Knob> getRe(List<String> knobs) throws org.apache.thrift.TException;

    public Map<String,KnobProp> properties(List<String> knobs) throws org.apache.thrift.TException;

    public void shutdown() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void setKnobs(Map<String,Knob> knobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getKnobs(List<String> knobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRe(List<String> knobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void properties(List<String> knobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void shutdown(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void setKnobs(Map<String,Knob> knobs) throws org.apache.thrift.TException
    {
      send_setKnobs(knobs);
      recv_setKnobs();
    }

    public void send_setKnobs(Map<String,Knob> knobs) throws org.apache.thrift.TException
    {
      setKnobs_args args = new setKnobs_args();
      args.setKnobs(knobs);
      sendBase("setKnobs", args);
    }

    public void recv_setKnobs() throws org.apache.thrift.TException
    {
      setKnobs_result result = new setKnobs_result();
      receiveBase(result, "setKnobs");
      return;
    }

    public Map<String,Knob> getKnobs(List<String> knobs) throws org.apache.thrift.TException
    {
      send_getKnobs(knobs);
      return recv_getKnobs();
    }

    public void send_getKnobs(List<String> knobs) throws org.apache.thrift.TException
    {
      getKnobs_args args = new getKnobs_args();
      args.setKnobs(knobs);
      sendBase("getKnobs", args);
    }

    public Map<String,Knob> recv_getKnobs() throws org.apache.thrift.TException
    {
      getKnobs_result result = new getKnobs_result();
      receiveBase(result, "getKnobs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getKnobs failed: unknown result");
    }

    public Map<String,Knob> getRe(List<String> knobs) throws org.apache.thrift.TException
    {
      send_getRe(knobs);
      return recv_getRe();
    }

    public void send_getRe(List<String> knobs) throws org.apache.thrift.TException
    {
      getRe_args args = new getRe_args();
      args.setKnobs(knobs);
      sendBase("getRe", args);
    }

    public Map<String,Knob> recv_getRe() throws org.apache.thrift.TException
    {
      getRe_result result = new getRe_result();
      receiveBase(result, "getRe");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRe failed: unknown result");
    }

    public Map<String,KnobProp> properties(List<String> knobs) throws org.apache.thrift.TException
    {
      send_properties(knobs);
      return recv_properties();
    }

    public void send_properties(List<String> knobs) throws org.apache.thrift.TException
    {
      properties_args args = new properties_args();
      args.setKnobs(knobs);
      sendBase("properties", args);
    }

    public Map<String,KnobProp> recv_properties() throws org.apache.thrift.TException
    {
      properties_result result = new properties_result();
      receiveBase(result, "properties");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "properties failed: unknown result");
    }

    public void shutdown() throws org.apache.thrift.TException
    {
      send_shutdown();
      recv_shutdown();
    }

    public void send_shutdown() throws org.apache.thrift.TException
    {
      shutdown_args args = new shutdown_args();
      sendBase("shutdown", args);
    }

    public void recv_shutdown() throws org.apache.thrift.TException
    {
      shutdown_result result = new shutdown_result();
      receiveBase(result, "shutdown");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void setKnobs(Map<String,Knob> knobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setKnobs_call method_call = new setKnobs_call(knobs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setKnobs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,Knob> knobs;
      public setKnobs_call(Map<String,Knob> knobs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.knobs = knobs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setKnobs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setKnobs_args args = new setKnobs_args();
        args.setKnobs(knobs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setKnobs();
      }
    }

    public void getKnobs(List<String> knobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getKnobs_call method_call = new getKnobs_call(knobs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getKnobs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> knobs;
      public getKnobs_call(List<String> knobs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.knobs = knobs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getKnobs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getKnobs_args args = new getKnobs_args();
        args.setKnobs(knobs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Knob> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getKnobs();
      }
    }

    public void getRe(List<String> knobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRe_call method_call = new getRe_call(knobs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRe_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> knobs;
      public getRe_call(List<String> knobs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.knobs = knobs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRe", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRe_args args = new getRe_args();
        args.setKnobs(knobs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Knob> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRe();
      }
    }

    public void properties(List<String> knobs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      properties_call method_call = new properties_call(knobs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class properties_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> knobs;
      public properties_call(List<String> knobs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.knobs = knobs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("properties", org.apache.thrift.protocol.TMessageType.CALL, 0));
        properties_args args = new properties_args();
        args.setKnobs(knobs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,KnobProp> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_properties();
      }
    }

    public void shutdown(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shutdown_call method_call = new shutdown_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shutdown_call extends org.apache.thrift.async.TAsyncMethodCall {
      public shutdown_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shutdown", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shutdown_args args = new shutdown_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_shutdown();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("setKnobs", new setKnobs());
      processMap.put("getKnobs", new getKnobs());
      processMap.put("getRe", new getRe());
      processMap.put("properties", new properties());
      processMap.put("shutdown", new shutdown());
      return processMap;
    }

    public static class setKnobs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setKnobs_args> {
      public setKnobs() {
        super("setKnobs");
      }

      public setKnobs_args getEmptyArgsInstance() {
        return new setKnobs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setKnobs_result getResult(I iface, setKnobs_args args) throws org.apache.thrift.TException {
        setKnobs_result result = new setKnobs_result();
        iface.setKnobs(args.knobs);
        return result;
      }
    }

    public static class getKnobs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getKnobs_args> {
      public getKnobs() {
        super("getKnobs");
      }

      public getKnobs_args getEmptyArgsInstance() {
        return new getKnobs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getKnobs_result getResult(I iface, getKnobs_args args) throws org.apache.thrift.TException {
        getKnobs_result result = new getKnobs_result();
        result.success = iface.getKnobs(args.knobs);
        return result;
      }
    }

    public static class getRe<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRe_args> {
      public getRe() {
        super("getRe");
      }

      public getRe_args getEmptyArgsInstance() {
        return new getRe_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRe_result getResult(I iface, getRe_args args) throws org.apache.thrift.TException {
        getRe_result result = new getRe_result();
        result.success = iface.getRe(args.knobs);
        return result;
      }
    }

    public static class properties<I extends Iface> extends org.apache.thrift.ProcessFunction<I, properties_args> {
      public properties() {
        super("properties");
      }

      public properties_args getEmptyArgsInstance() {
        return new properties_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public properties_result getResult(I iface, properties_args args) throws org.apache.thrift.TException {
        properties_result result = new properties_result();
        result.success = iface.properties(args.knobs);
        return result;
      }
    }

    public static class shutdown<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shutdown_args> {
      public shutdown() {
        super("shutdown");
      }

      public shutdown_args getEmptyArgsInstance() {
        return new shutdown_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public shutdown_result getResult(I iface, shutdown_args args) throws org.apache.thrift.TException {
        shutdown_result result = new shutdown_result();
        iface.shutdown();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("setKnobs", new setKnobs());
      processMap.put("getKnobs", new getKnobs());
      processMap.put("getRe", new getRe());
      processMap.put("properties", new properties());
      processMap.put("shutdown", new shutdown());
      return processMap;
    }

    public static class setKnobs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setKnobs_args, Void> {
      public setKnobs() {
        super("setKnobs");
      }

      public setKnobs_args getEmptyArgsInstance() {
        return new setKnobs_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setKnobs_result result = new setKnobs_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setKnobs_result result = new setKnobs_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setKnobs_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setKnobs(args.knobs,resultHandler);
      }
    }

    public static class getKnobs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getKnobs_args, Map<String,Knob>> {
      public getKnobs() {
        super("getKnobs");
      }

      public getKnobs_args getEmptyArgsInstance() {
        return new getKnobs_args();
      }

      public AsyncMethodCallback<Map<String,Knob>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Knob>>() { 
          public void onComplete(Map<String,Knob> o) {
            getKnobs_result result = new getKnobs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getKnobs_result result = new getKnobs_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getKnobs_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Knob>> resultHandler) throws TException {
        iface.getKnobs(args.knobs,resultHandler);
      }
    }

    public static class getRe<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRe_args, Map<String,Knob>> {
      public getRe() {
        super("getRe");
      }

      public getRe_args getEmptyArgsInstance() {
        return new getRe_args();
      }

      public AsyncMethodCallback<Map<String,Knob>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Knob>>() { 
          public void onComplete(Map<String,Knob> o) {
            getRe_result result = new getRe_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRe_result result = new getRe_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRe_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Knob>> resultHandler) throws TException {
        iface.getRe(args.knobs,resultHandler);
      }
    }

    public static class properties<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, properties_args, Map<String,KnobProp>> {
      public properties() {
        super("properties");
      }

      public properties_args getEmptyArgsInstance() {
        return new properties_args();
      }

      public AsyncMethodCallback<Map<String,KnobProp>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,KnobProp>>() { 
          public void onComplete(Map<String,KnobProp> o) {
            properties_result result = new properties_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            properties_result result = new properties_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, properties_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,KnobProp>> resultHandler) throws TException {
        iface.properties(args.knobs,resultHandler);
      }
    }

    public static class shutdown<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, shutdown_args, Void> {
      public shutdown() {
        super("shutdown");
      }

      public shutdown_args getEmptyArgsInstance() {
        return new shutdown_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            shutdown_result result = new shutdown_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            shutdown_result result = new shutdown_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, shutdown_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.shutdown(resultHandler);
      }
    }

  }

  public static class setKnobs_args implements org.apache.thrift.TBase<setKnobs_args, setKnobs_args._Fields>, java.io.Serializable, Cloneable, Comparable<setKnobs_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setKnobs_args");

    private static final org.apache.thrift.protocol.TField KNOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("knobs", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setKnobs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setKnobs_argsTupleSchemeFactory());
    }

    public Map<String,Knob> knobs; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeMap(knobs);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public setKnobs_args(android.os.Parcel in) {
      this.knobs = new HashMap<String,Knob>();
       in.readMap(this.knobs, setKnobs_args.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<setKnobs_args> CREATOR = new android.os.Parcelable.Creator<setKnobs_args>() {
      @Override
      public setKnobs_args[] newArray(int size) {
        return new setKnobs_args[size];
      }

      @Override
      public setKnobs_args createFromParcel(android.os.Parcel in) {
        return new setKnobs_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KNOBS((short)1, "knobs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KNOBS
            return KNOBS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KNOBS, new org.apache.thrift.meta_data.FieldMetaData("knobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP          , "KnobMap")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setKnobs_args.class, metaDataMap);
    }

    public setKnobs_args() {
    }

    public setKnobs_args(
      Map<String,Knob> knobs)
    {
      this();
      this.knobs = knobs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setKnobs_args(setKnobs_args other) {
      if (other.isSetKnobs()) {
        this.knobs = other.knobs;
      }
    }

    public setKnobs_args deepCopy() {
      return new setKnobs_args(this);
    }

    @Override
    public void clear() {
      this.knobs = null;
    }

    public int getKnobsSize() {
      return (this.knobs == null) ? 0 : this.knobs.size();
    }

    public void putToKnobs(String key, Knob val) {
      if (this.knobs == null) {
        this.knobs = new HashMap<String,Knob>();
      }
      this.knobs.put(key, val);
    }

    public Map<String,Knob> getKnobs() {
      return this.knobs;
    }

    public setKnobs_args setKnobs(Map<String,Knob> knobs) {
      this.knobs = knobs;
      return this;
    }

    public void unsetKnobs() {
      this.knobs = null;
    }

    /** Returns true if field knobs is set (has been assigned a value) and false otherwise */
    public boolean isSetKnobs() {
      return this.knobs != null;
    }

    public void setKnobsIsSet(boolean value) {
      if (!value) {
        this.knobs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KNOBS:
        if (value == null) {
          unsetKnobs();
        } else {
          setKnobs((Map<String,Knob>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KNOBS:
        return getKnobs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KNOBS:
        return isSetKnobs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setKnobs_args)
        return this.equals((setKnobs_args)that);
      return false;
    }

    public boolean equals(setKnobs_args that) {
      if (that == null)
        return false;

      boolean this_present_knobs = true && this.isSetKnobs();
      boolean that_present_knobs = true && that.isSetKnobs();
      if (this_present_knobs || that_present_knobs) {
        if (!(this_present_knobs && that_present_knobs))
          return false;
        if (!this.knobs.equals(that.knobs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_knobs = true && (isSetKnobs());
      list.add(present_knobs);
      if (present_knobs)
        list.add(knobs);

      return list.hashCode();
    }

    @Override
    public int compareTo(setKnobs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKnobs()).compareTo(other.isSetKnobs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnobs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knobs, other.knobs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setKnobs_args(");
      boolean first = true;

      sb.append("knobs:");
      if (this.knobs == null) {
        sb.append("null");
      } else {
        sb.append(this.knobs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setKnobs_argsStandardSchemeFactory implements SchemeFactory {
      public setKnobs_argsStandardScheme getScheme() {
        return new setKnobs_argsStandardScheme();
      }
    }

    private static class setKnobs_argsStandardScheme extends StandardScheme<setKnobs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setKnobs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KNOBS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
                  struct.knobs = new HashMap<String,Knob>(2*_map48.size);
                  String _key49;
                  Knob _val50;
                  for (int _i51 = 0; _i51 < _map48.size; ++_i51)
                  {
                    _key49 = iprot.readString();
                    _val50 = new Knob();
                    _val50.read(iprot);
                    struct.knobs.put(_key49, _val50);
                  }
                  iprot.readMapEnd();
                }
                struct.setKnobsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setKnobs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.knobs != null) {
          oprot.writeFieldBegin(KNOBS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.knobs.size()));
            for (Map.Entry<String, Knob> _iter52 : struct.knobs.entrySet())
            {
              oprot.writeString(_iter52.getKey());
              _iter52.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setKnobs_argsTupleSchemeFactory implements SchemeFactory {
      public setKnobs_argsTupleScheme getScheme() {
        return new setKnobs_argsTupleScheme();
      }
    }

    private static class setKnobs_argsTupleScheme extends TupleScheme<setKnobs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setKnobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKnobs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKnobs()) {
          {
            oprot.writeI32(struct.knobs.size());
            for (Map.Entry<String, Knob> _iter53 : struct.knobs.entrySet())
            {
              oprot.writeString(_iter53.getKey());
              _iter53.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setKnobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map54 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.knobs = new HashMap<String,Knob>(2*_map54.size);
            String _key55;
            Knob _val56;
            for (int _i57 = 0; _i57 < _map54.size; ++_i57)
            {
              _key55 = iprot.readString();
              _val56 = new Knob();
              _val56.read(iprot);
              struct.knobs.put(_key55, _val56);
            }
          }
          struct.setKnobsIsSet(true);
        }
      }
    }

  }

  public static class setKnobs_result implements org.apache.thrift.TBase<setKnobs_result, setKnobs_result._Fields>, java.io.Serializable, Cloneable, Comparable<setKnobs_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setKnobs_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setKnobs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setKnobs_resultTupleSchemeFactory());
    }


    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public setKnobs_result(android.os.Parcel in) {
    }

    public static final android.os.Parcelable.Creator<setKnobs_result> CREATOR = new android.os.Parcelable.Creator<setKnobs_result>() {
      @Override
      public setKnobs_result[] newArray(int size) {
        return new setKnobs_result[size];
      }

      @Override
      public setKnobs_result createFromParcel(android.os.Parcel in) {
        return new setKnobs_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setKnobs_result.class, metaDataMap);
    }

    public setKnobs_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setKnobs_result(setKnobs_result other) {
    }

    public setKnobs_result deepCopy() {
      return new setKnobs_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setKnobs_result)
        return this.equals((setKnobs_result)that);
      return false;
    }

    public boolean equals(setKnobs_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(setKnobs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setKnobs_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setKnobs_resultStandardSchemeFactory implements SchemeFactory {
      public setKnobs_resultStandardScheme getScheme() {
        return new setKnobs_resultStandardScheme();
      }
    }

    private static class setKnobs_resultStandardScheme extends StandardScheme<setKnobs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setKnobs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setKnobs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setKnobs_resultTupleSchemeFactory implements SchemeFactory {
      public setKnobs_resultTupleScheme getScheme() {
        return new setKnobs_resultTupleScheme();
      }
    }

    private static class setKnobs_resultTupleScheme extends TupleScheme<setKnobs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setKnobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setKnobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getKnobs_args implements org.apache.thrift.TBase<getKnobs_args, getKnobs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getKnobs_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getKnobs_args");

    private static final org.apache.thrift.protocol.TField KNOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("knobs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getKnobs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getKnobs_argsTupleSchemeFactory());
    }

    public List<String> knobs; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeList(knobs);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getKnobs_args(android.os.Parcel in) {
      this.knobs = new ArrayList<String>();
      in.readList(this.knobs, getKnobs_args.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getKnobs_args> CREATOR = new android.os.Parcelable.Creator<getKnobs_args>() {
      @Override
      public getKnobs_args[] newArray(int size) {
        return new getKnobs_args[size];
      }

      @Override
      public getKnobs_args createFromParcel(android.os.Parcel in) {
        return new getKnobs_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KNOBS((short)1, "knobs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KNOBS
            return KNOBS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KNOBS, new org.apache.thrift.meta_data.FieldMetaData("knobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "KnobIDList")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getKnobs_args.class, metaDataMap);
    }

    public getKnobs_args() {
    }

    public getKnobs_args(
      List<String> knobs)
    {
      this();
      this.knobs = knobs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getKnobs_args(getKnobs_args other) {
      if (other.isSetKnobs()) {
        this.knobs = other.knobs;
      }
    }

    public getKnobs_args deepCopy() {
      return new getKnobs_args(this);
    }

    @Override
    public void clear() {
      this.knobs = null;
    }

    public int getKnobsSize() {
      return (this.knobs == null) ? 0 : this.knobs.size();
    }

    public java.util.Iterator<String> getKnobsIterator() {
      return (this.knobs == null) ? null : this.knobs.iterator();
    }

    public void addToKnobs(String elem) {
      if (this.knobs == null) {
        this.knobs = new ArrayList<String>();
      }
      this.knobs.add(elem);
    }

    public List<String> getKnobs() {
      return this.knobs;
    }

    public getKnobs_args setKnobs(List<String> knobs) {
      this.knobs = knobs;
      return this;
    }

    public void unsetKnobs() {
      this.knobs = null;
    }

    /** Returns true if field knobs is set (has been assigned a value) and false otherwise */
    public boolean isSetKnobs() {
      return this.knobs != null;
    }

    public void setKnobsIsSet(boolean value) {
      if (!value) {
        this.knobs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KNOBS:
        if (value == null) {
          unsetKnobs();
        } else {
          setKnobs((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KNOBS:
        return getKnobs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KNOBS:
        return isSetKnobs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getKnobs_args)
        return this.equals((getKnobs_args)that);
      return false;
    }

    public boolean equals(getKnobs_args that) {
      if (that == null)
        return false;

      boolean this_present_knobs = true && this.isSetKnobs();
      boolean that_present_knobs = true && that.isSetKnobs();
      if (this_present_knobs || that_present_knobs) {
        if (!(this_present_knobs && that_present_knobs))
          return false;
        if (!this.knobs.equals(that.knobs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_knobs = true && (isSetKnobs());
      list.add(present_knobs);
      if (present_knobs)
        list.add(knobs);

      return list.hashCode();
    }

    @Override
    public int compareTo(getKnobs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKnobs()).compareTo(other.isSetKnobs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnobs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knobs, other.knobs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getKnobs_args(");
      boolean first = true;

      sb.append("knobs:");
      if (this.knobs == null) {
        sb.append("null");
      } else {
        sb.append(this.knobs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getKnobs_argsStandardSchemeFactory implements SchemeFactory {
      public getKnobs_argsStandardScheme getScheme() {
        return new getKnobs_argsStandardScheme();
      }
    }

    private static class getKnobs_argsStandardScheme extends StandardScheme<getKnobs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getKnobs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KNOBS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                  struct.knobs = new ArrayList<String>(_list58.size);
                  String _elem59;
                  for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                  {
                    _elem59 = iprot.readString();
                    struct.knobs.add(_elem59);
                  }
                  iprot.readListEnd();
                }
                struct.setKnobsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getKnobs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.knobs != null) {
          oprot.writeFieldBegin(KNOBS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.knobs.size()));
            for (String _iter61 : struct.knobs)
            {
              oprot.writeString(_iter61);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getKnobs_argsTupleSchemeFactory implements SchemeFactory {
      public getKnobs_argsTupleScheme getScheme() {
        return new getKnobs_argsTupleScheme();
      }
    }

    private static class getKnobs_argsTupleScheme extends TupleScheme<getKnobs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getKnobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKnobs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKnobs()) {
          {
            oprot.writeI32(struct.knobs.size());
            for (String _iter62 : struct.knobs)
            {
              oprot.writeString(_iter62);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getKnobs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.knobs = new ArrayList<String>(_list63.size);
            String _elem64;
            for (int _i65 = 0; _i65 < _list63.size; ++_i65)
            {
              _elem64 = iprot.readString();
              struct.knobs.add(_elem64);
            }
          }
          struct.setKnobsIsSet(true);
        }
      }
    }

  }

  public static class getKnobs_result implements org.apache.thrift.TBase<getKnobs_result, getKnobs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getKnobs_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getKnobs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getKnobs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getKnobs_resultTupleSchemeFactory());
    }

    public Map<String,Knob> success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeMap(success);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getKnobs_result(android.os.Parcel in) {
      this.success = new HashMap<String,Knob>();
       in.readMap(this.success, getKnobs_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getKnobs_result> CREATOR = new android.os.Parcelable.Creator<getKnobs_result>() {
      @Override
      public getKnobs_result[] newArray(int size) {
        return new getKnobs_result[size];
      }

      @Override
      public getKnobs_result createFromParcel(android.os.Parcel in) {
        return new getKnobs_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP          , "KnobMap")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getKnobs_result.class, metaDataMap);
    }

    public getKnobs_result() {
    }

    public getKnobs_result(
      Map<String,Knob> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getKnobs_result(getKnobs_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getKnobs_result deepCopy() {
      return new getKnobs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Knob val) {
      if (this.success == null) {
        this.success = new HashMap<String,Knob>();
      }
      this.success.put(key, val);
    }

    public Map<String,Knob> getSuccess() {
      return this.success;
    }

    public getKnobs_result setSuccess(Map<String,Knob> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Knob>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getKnobs_result)
        return this.equals((getKnobs_result)that);
      return false;
    }

    public boolean equals(getKnobs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getKnobs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getKnobs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getKnobs_resultStandardSchemeFactory implements SchemeFactory {
      public getKnobs_resultStandardScheme getScheme() {
        return new getKnobs_resultStandardScheme();
      }
    }

    private static class getKnobs_resultStandardScheme extends StandardScheme<getKnobs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getKnobs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map66 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Knob>(2*_map66.size);
                  String _key67;
                  Knob _val68;
                  for (int _i69 = 0; _i69 < _map66.size; ++_i69)
                  {
                    _key67 = iprot.readString();
                    _val68 = new Knob();
                    _val68.read(iprot);
                    struct.success.put(_key67, _val68);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getKnobs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, Knob> _iter70 : struct.success.entrySet())
            {
              oprot.writeString(_iter70.getKey());
              _iter70.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getKnobs_resultTupleSchemeFactory implements SchemeFactory {
      public getKnobs_resultTupleScheme getScheme() {
        return new getKnobs_resultTupleScheme();
      }
    }

    private static class getKnobs_resultTupleScheme extends TupleScheme<getKnobs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getKnobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Knob> _iter71 : struct.success.entrySet())
            {
              oprot.writeString(_iter71.getKey());
              _iter71.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getKnobs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map72 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,Knob>(2*_map72.size);
            String _key73;
            Knob _val74;
            for (int _i75 = 0; _i75 < _map72.size; ++_i75)
            {
              _key73 = iprot.readString();
              _val74 = new Knob();
              _val74.read(iprot);
              struct.success.put(_key73, _val74);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRe_args implements org.apache.thrift.TBase<getRe_args, getRe_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRe_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRe_args");

    private static final org.apache.thrift.protocol.TField KNOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("knobs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRe_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRe_argsTupleSchemeFactory());
    }

    public List<String> knobs; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeList(knobs);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getRe_args(android.os.Parcel in) {
      this.knobs = new ArrayList<String>();
      in.readList(this.knobs, getRe_args.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getRe_args> CREATOR = new android.os.Parcelable.Creator<getRe_args>() {
      @Override
      public getRe_args[] newArray(int size) {
        return new getRe_args[size];
      }

      @Override
      public getRe_args createFromParcel(android.os.Parcel in) {
        return new getRe_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KNOBS((short)1, "knobs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KNOBS
            return KNOBS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KNOBS, new org.apache.thrift.meta_data.FieldMetaData("knobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "KnobIDList")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRe_args.class, metaDataMap);
    }

    public getRe_args() {
    }

    public getRe_args(
      List<String> knobs)
    {
      this();
      this.knobs = knobs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRe_args(getRe_args other) {
      if (other.isSetKnobs()) {
        this.knobs = other.knobs;
      }
    }

    public getRe_args deepCopy() {
      return new getRe_args(this);
    }

    @Override
    public void clear() {
      this.knobs = null;
    }

    public int getKnobsSize() {
      return (this.knobs == null) ? 0 : this.knobs.size();
    }

    public java.util.Iterator<String> getKnobsIterator() {
      return (this.knobs == null) ? null : this.knobs.iterator();
    }

    public void addToKnobs(String elem) {
      if (this.knobs == null) {
        this.knobs = new ArrayList<String>();
      }
      this.knobs.add(elem);
    }

    public List<String> getKnobs() {
      return this.knobs;
    }

    public getRe_args setKnobs(List<String> knobs) {
      this.knobs = knobs;
      return this;
    }

    public void unsetKnobs() {
      this.knobs = null;
    }

    /** Returns true if field knobs is set (has been assigned a value) and false otherwise */
    public boolean isSetKnobs() {
      return this.knobs != null;
    }

    public void setKnobsIsSet(boolean value) {
      if (!value) {
        this.knobs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KNOBS:
        if (value == null) {
          unsetKnobs();
        } else {
          setKnobs((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KNOBS:
        return getKnobs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KNOBS:
        return isSetKnobs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRe_args)
        return this.equals((getRe_args)that);
      return false;
    }

    public boolean equals(getRe_args that) {
      if (that == null)
        return false;

      boolean this_present_knobs = true && this.isSetKnobs();
      boolean that_present_knobs = true && that.isSetKnobs();
      if (this_present_knobs || that_present_knobs) {
        if (!(this_present_knobs && that_present_knobs))
          return false;
        if (!this.knobs.equals(that.knobs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_knobs = true && (isSetKnobs());
      list.add(present_knobs);
      if (present_knobs)
        list.add(knobs);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRe_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKnobs()).compareTo(other.isSetKnobs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnobs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knobs, other.knobs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRe_args(");
      boolean first = true;

      sb.append("knobs:");
      if (this.knobs == null) {
        sb.append("null");
      } else {
        sb.append(this.knobs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRe_argsStandardSchemeFactory implements SchemeFactory {
      public getRe_argsStandardScheme getScheme() {
        return new getRe_argsStandardScheme();
      }
    }

    private static class getRe_argsStandardScheme extends StandardScheme<getRe_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KNOBS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                  struct.knobs = new ArrayList<String>(_list76.size);
                  String _elem77;
                  for (int _i78 = 0; _i78 < _list76.size; ++_i78)
                  {
                    _elem77 = iprot.readString();
                    struct.knobs.add(_elem77);
                  }
                  iprot.readListEnd();
                }
                struct.setKnobsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRe_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.knobs != null) {
          oprot.writeFieldBegin(KNOBS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.knobs.size()));
            for (String _iter79 : struct.knobs)
            {
              oprot.writeString(_iter79);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRe_argsTupleSchemeFactory implements SchemeFactory {
      public getRe_argsTupleScheme getScheme() {
        return new getRe_argsTupleScheme();
      }
    }

    private static class getRe_argsTupleScheme extends TupleScheme<getRe_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKnobs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKnobs()) {
          {
            oprot.writeI32(struct.knobs.size());
            for (String _iter80 : struct.knobs)
            {
              oprot.writeString(_iter80);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRe_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.knobs = new ArrayList<String>(_list81.size);
            String _elem82;
            for (int _i83 = 0; _i83 < _list81.size; ++_i83)
            {
              _elem82 = iprot.readString();
              struct.knobs.add(_elem82);
            }
          }
          struct.setKnobsIsSet(true);
        }
      }
    }

  }

  public static class getRe_result implements org.apache.thrift.TBase<getRe_result, getRe_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRe_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRe_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRe_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRe_resultTupleSchemeFactory());
    }

    public Map<String,Knob> success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeMap(success);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public getRe_result(android.os.Parcel in) {
      this.success = new HashMap<String,Knob>();
       in.readMap(this.success, getRe_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<getRe_result> CREATOR = new android.os.Parcelable.Creator<getRe_result>() {
      @Override
      public getRe_result[] newArray(int size) {
        return new getRe_result[size];
      }

      @Override
      public getRe_result createFromParcel(android.os.Parcel in) {
        return new getRe_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP          , "KnobMap")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRe_result.class, metaDataMap);
    }

    public getRe_result() {
    }

    public getRe_result(
      Map<String,Knob> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRe_result(getRe_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getRe_result deepCopy() {
      return new getRe_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Knob val) {
      if (this.success == null) {
        this.success = new HashMap<String,Knob>();
      }
      this.success.put(key, val);
    }

    public Map<String,Knob> getSuccess() {
      return this.success;
    }

    public getRe_result setSuccess(Map<String,Knob> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Knob>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRe_result)
        return this.equals((getRe_result)that);
      return false;
    }

    public boolean equals(getRe_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRe_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRe_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRe_resultStandardSchemeFactory implements SchemeFactory {
      public getRe_resultStandardScheme getScheme() {
        return new getRe_resultStandardScheme();
      }
    }

    private static class getRe_resultStandardScheme extends StandardScheme<getRe_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRe_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map84 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Knob>(2*_map84.size);
                  String _key85;
                  Knob _val86;
                  for (int _i87 = 0; _i87 < _map84.size; ++_i87)
                  {
                    _key85 = iprot.readString();
                    _val86 = new Knob();
                    _val86.read(iprot);
                    struct.success.put(_key85, _val86);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRe_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, Knob> _iter88 : struct.success.entrySet())
            {
              oprot.writeString(_iter88.getKey());
              _iter88.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRe_resultTupleSchemeFactory implements SchemeFactory {
      public getRe_resultTupleScheme getScheme() {
        return new getRe_resultTupleScheme();
      }
    }

    private static class getRe_resultTupleScheme extends TupleScheme<getRe_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Knob> _iter89 : struct.success.entrySet())
            {
              oprot.writeString(_iter89.getKey());
              _iter89.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRe_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map90 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,Knob>(2*_map90.size);
            String _key91;
            Knob _val92;
            for (int _i93 = 0; _i93 < _map90.size; ++_i93)
            {
              _key91 = iprot.readString();
              _val92 = new Knob();
              _val92.read(iprot);
              struct.success.put(_key91, _val92);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class properties_args implements org.apache.thrift.TBase<properties_args, properties_args._Fields>, java.io.Serializable, Cloneable, Comparable<properties_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("properties_args");

    private static final org.apache.thrift.protocol.TField KNOBS_FIELD_DESC = new org.apache.thrift.protocol.TField("knobs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new properties_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new properties_argsTupleSchemeFactory());
    }

    public List<String> knobs; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeList(knobs);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public properties_args(android.os.Parcel in) {
      this.knobs = new ArrayList<String>();
      in.readList(this.knobs, properties_args.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<properties_args> CREATOR = new android.os.Parcelable.Creator<properties_args>() {
      @Override
      public properties_args[] newArray(int size) {
        return new properties_args[size];
      }

      @Override
      public properties_args createFromParcel(android.os.Parcel in) {
        return new properties_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KNOBS((short)1, "knobs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KNOBS
            return KNOBS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KNOBS, new org.apache.thrift.meta_data.FieldMetaData("knobs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "KnobIDList")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(properties_args.class, metaDataMap);
    }

    public properties_args() {
    }

    public properties_args(
      List<String> knobs)
    {
      this();
      this.knobs = knobs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public properties_args(properties_args other) {
      if (other.isSetKnobs()) {
        this.knobs = other.knobs;
      }
    }

    public properties_args deepCopy() {
      return new properties_args(this);
    }

    @Override
    public void clear() {
      this.knobs = null;
    }

    public int getKnobsSize() {
      return (this.knobs == null) ? 0 : this.knobs.size();
    }

    public java.util.Iterator<String> getKnobsIterator() {
      return (this.knobs == null) ? null : this.knobs.iterator();
    }

    public void addToKnobs(String elem) {
      if (this.knobs == null) {
        this.knobs = new ArrayList<String>();
      }
      this.knobs.add(elem);
    }

    public List<String> getKnobs() {
      return this.knobs;
    }

    public properties_args setKnobs(List<String> knobs) {
      this.knobs = knobs;
      return this;
    }

    public void unsetKnobs() {
      this.knobs = null;
    }

    /** Returns true if field knobs is set (has been assigned a value) and false otherwise */
    public boolean isSetKnobs() {
      return this.knobs != null;
    }

    public void setKnobsIsSet(boolean value) {
      if (!value) {
        this.knobs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KNOBS:
        if (value == null) {
          unsetKnobs();
        } else {
          setKnobs((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KNOBS:
        return getKnobs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KNOBS:
        return isSetKnobs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof properties_args)
        return this.equals((properties_args)that);
      return false;
    }

    public boolean equals(properties_args that) {
      if (that == null)
        return false;

      boolean this_present_knobs = true && this.isSetKnobs();
      boolean that_present_knobs = true && that.isSetKnobs();
      if (this_present_knobs || that_present_knobs) {
        if (!(this_present_knobs && that_present_knobs))
          return false;
        if (!this.knobs.equals(that.knobs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_knobs = true && (isSetKnobs());
      list.add(present_knobs);
      if (present_knobs)
        list.add(knobs);

      return list.hashCode();
    }

    @Override
    public int compareTo(properties_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKnobs()).compareTo(other.isSetKnobs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKnobs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knobs, other.knobs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("properties_args(");
      boolean first = true;

      sb.append("knobs:");
      if (this.knobs == null) {
        sb.append("null");
      } else {
        sb.append(this.knobs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class properties_argsStandardSchemeFactory implements SchemeFactory {
      public properties_argsStandardScheme getScheme() {
        return new properties_argsStandardScheme();
      }
    }

    private static class properties_argsStandardScheme extends StandardScheme<properties_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, properties_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KNOBS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list94 = iprot.readListBegin();
                  struct.knobs = new ArrayList<String>(_list94.size);
                  String _elem95;
                  for (int _i96 = 0; _i96 < _list94.size; ++_i96)
                  {
                    _elem95 = iprot.readString();
                    struct.knobs.add(_elem95);
                  }
                  iprot.readListEnd();
                }
                struct.setKnobsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, properties_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.knobs != null) {
          oprot.writeFieldBegin(KNOBS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.knobs.size()));
            for (String _iter97 : struct.knobs)
            {
              oprot.writeString(_iter97);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class properties_argsTupleSchemeFactory implements SchemeFactory {
      public properties_argsTupleScheme getScheme() {
        return new properties_argsTupleScheme();
      }
    }

    private static class properties_argsTupleScheme extends TupleScheme<properties_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, properties_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKnobs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKnobs()) {
          {
            oprot.writeI32(struct.knobs.size());
            for (String _iter98 : struct.knobs)
            {
              oprot.writeString(_iter98);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, properties_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list99 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.knobs = new ArrayList<String>(_list99.size);
            String _elem100;
            for (int _i101 = 0; _i101 < _list99.size; ++_i101)
            {
              _elem100 = iprot.readString();
              struct.knobs.add(_elem100);
            }
          }
          struct.setKnobsIsSet(true);
        }
      }
    }

  }

  public static class properties_result implements org.apache.thrift.TBase<properties_result, properties_result._Fields>, java.io.Serializable, Cloneable, Comparable<properties_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("properties_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new properties_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new properties_resultTupleSchemeFactory());
    }

    public Map<String,KnobProp> success; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
      out.writeMap(success);
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public properties_result(android.os.Parcel in) {
      this.success = new HashMap<String,KnobProp>();
       in.readMap(this.success, properties_result.class.getClassLoader());
    }

    public static final android.os.Parcelable.Creator<properties_result> CREATOR = new android.os.Parcelable.Creator<properties_result>() {
      @Override
      public properties_result[] newArray(int size) {
        return new properties_result[size];
      }

      @Override
      public properties_result createFromParcel(android.os.Parcel in) {
        return new properties_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP          , "KnobPropMap")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(properties_result.class, metaDataMap);
    }

    public properties_result() {
    }

    public properties_result(
      Map<String,KnobProp> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public properties_result(properties_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public properties_result deepCopy() {
      return new properties_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, KnobProp val) {
      if (this.success == null) {
        this.success = new HashMap<String,KnobProp>();
      }
      this.success.put(key, val);
    }

    public Map<String,KnobProp> getSuccess() {
      return this.success;
    }

    public properties_result setSuccess(Map<String,KnobProp> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,KnobProp>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof properties_result)
        return this.equals((properties_result)that);
      return false;
    }

    public boolean equals(properties_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(properties_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("properties_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class properties_resultStandardSchemeFactory implements SchemeFactory {
      public properties_resultStandardScheme getScheme() {
        return new properties_resultStandardScheme();
      }
    }

    private static class properties_resultStandardScheme extends StandardScheme<properties_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, properties_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map102 = iprot.readMapBegin();
                  struct.success = new HashMap<String,KnobProp>(2*_map102.size);
                  String _key103;
                  KnobProp _val104;
                  for (int _i105 = 0; _i105 < _map102.size; ++_i105)
                  {
                    _key103 = iprot.readString();
                    _val104 = new KnobProp();
                    _val104.read(iprot);
                    struct.success.put(_key103, _val104);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, properties_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, KnobProp> _iter106 : struct.success.entrySet())
            {
              oprot.writeString(_iter106.getKey());
              _iter106.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class properties_resultTupleSchemeFactory implements SchemeFactory {
      public properties_resultTupleScheme getScheme() {
        return new properties_resultTupleScheme();
      }
    }

    private static class properties_resultTupleScheme extends TupleScheme<properties_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, properties_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, KnobProp> _iter107 : struct.success.entrySet())
            {
              oprot.writeString(_iter107.getKey());
              _iter107.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, properties_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map108 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,KnobProp>(2*_map108.size);
            String _key109;
            KnobProp _val110;
            for (int _i111 = 0; _i111 < _map108.size; ++_i111)
            {
              _key109 = iprot.readString();
              _val110 = new KnobProp();
              _val110.read(iprot);
              struct.success.put(_key109, _val110);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class shutdown_args implements org.apache.thrift.TBase<shutdown_args, shutdown_args._Fields>, java.io.Serializable, Cloneable, Comparable<shutdown_args>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shutdown_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shutdown_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shutdown_argsTupleSchemeFactory());
    }


    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public shutdown_args(android.os.Parcel in) {
    }

    public static final android.os.Parcelable.Creator<shutdown_args> CREATOR = new android.os.Parcelable.Creator<shutdown_args>() {
      @Override
      public shutdown_args[] newArray(int size) {
        return new shutdown_args[size];
      }

      @Override
      public shutdown_args createFromParcel(android.os.Parcel in) {
        return new shutdown_args(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdown_args.class, metaDataMap);
    }

    public shutdown_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdown_args(shutdown_args other) {
    }

    public shutdown_args deepCopy() {
      return new shutdown_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shutdown_args)
        return this.equals((shutdown_args)that);
      return false;
    }

    public boolean equals(shutdown_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(shutdown_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shutdown_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shutdown_argsStandardSchemeFactory implements SchemeFactory {
      public shutdown_argsStandardScheme getScheme() {
        return new shutdown_argsStandardScheme();
      }
    }

    private static class shutdown_argsStandardScheme extends StandardScheme<shutdown_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shutdown_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shutdown_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shutdown_argsTupleSchemeFactory implements SchemeFactory {
      public shutdown_argsTupleScheme getScheme() {
        return new shutdown_argsTupleScheme();
      }
    }

    private static class shutdown_argsTupleScheme extends TupleScheme<shutdown_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shutdown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shutdown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class shutdown_result implements org.apache.thrift.TBase<shutdown_result, shutdown_result._Fields>, java.io.Serializable, Cloneable, Comparable<shutdown_result>, android.os.Parcelable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shutdown_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shutdown_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shutdown_resultTupleSchemeFactory());
    }


    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
    }

    @Override
    public int describeContents() {
      return 0;
    }

    public shutdown_result(android.os.Parcel in) {
    }

    public static final android.os.Parcelable.Creator<shutdown_result> CREATOR = new android.os.Parcelable.Creator<shutdown_result>() {
      @Override
      public shutdown_result[] newArray(int size) {
        return new shutdown_result[size];
      }

      @Override
      public shutdown_result createFromParcel(android.os.Parcel in) {
        return new shutdown_result(in);
      }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdown_result.class, metaDataMap);
    }

    public shutdown_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdown_result(shutdown_result other) {
    }

    public shutdown_result deepCopy() {
      return new shutdown_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shutdown_result)
        return this.equals((shutdown_result)that);
      return false;
    }

    public boolean equals(shutdown_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(shutdown_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shutdown_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shutdown_resultStandardSchemeFactory implements SchemeFactory {
      public shutdown_resultStandardScheme getScheme() {
        return new shutdown_resultStandardScheme();
      }
    }

    private static class shutdown_resultStandardScheme extends StandardScheme<shutdown_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shutdown_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shutdown_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shutdown_resultTupleSchemeFactory implements SchemeFactory {
      public shutdown_resultTupleScheme getScheme() {
        return new shutdown_resultTupleScheme();
      }
    }

    private static class shutdown_resultTupleScheme extends TupleScheme<shutdown_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shutdown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shutdown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
